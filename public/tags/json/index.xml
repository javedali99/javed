<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>json | Silvia Canelón</title>
    <link>/tags/json/</link>
      <atom:link href="/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <description>json</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Silvia Canelón, 2021</copyright><lastBuildDate>Tue, 12 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hud586b8bf8dfe31bebdd5c85bf61695a2_5299802_512x512_fill_lanczos_center_2.png</url>
      <title>json</title>
      <link>/tags/json/</link>
    </image>
    
    <item>
      <title>Migrating from Trello to Airtable: Working with JSON Data in R</title>
      <link>/2020-05-12-trello-to-airtable/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>/2020-05-12-trello-to-airtable/</guid>
      <description>
&lt;script src=&#34;index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;index_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;index_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-to-expect&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; What to expect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#choose-your-own-adventure&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Choose your own adventure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#follow-along-with-me&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Follow along with me!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#importing-json-file&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Importing JSON file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parsing-information&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Parsing information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exporting-to-csv&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Exporting to CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#formatting-in-airtable&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;7&lt;/span&gt; Formatting in Airtable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-forward&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8&lt;/span&gt; Moving forward&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://airtable.com/&#34;&gt;Airtable&lt;/a&gt; is a user-friendly and &lt;em&gt;powerful&lt;/em&gt; tool&lt;/strong&gt; that until recently I’d been using for personal projects (i.e. document organizing, apartment hunting, etc.). A couple of weeks ago I leaned on Airtable to create a base designed for the &lt;a href=&#34;https://www.womensmedicalfund.org/prfc&#34;&gt;Philadelphia Reproductive Freedom Collective&lt;/a&gt; to support our COVID-19 mutual aid efforts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shout out to the &lt;a href=&#34;https://siliconvalleydsa.org/&#34;&gt;Silicon Valley Democratic Socialists of America&lt;/a&gt; who provided inspiration and support! Their mutual aid network is extensive and operates at an impressive scale. Get connected with the South Bay Mutual Aid network here: &lt;a href=&#34;https://www.aidnetwork.org/&#34; class=&#34;uri&#34;&gt;https://www.aidnetwork.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having fallen in some Airtable deep-work I figured maybe it was time to &lt;strong&gt;retire my Trello boards&lt;/strong&gt; in favor of some task bases. Airtable accepts CSV files from Trello but, alas, my free Trello account only gave me the option to print as a PDF or export as JSON. I decided this would be a good opportunity to learn how to parse JSON data and export it as a CSV ready for import to Airtable.&lt;/p&gt;
&lt;div id=&#34;what-to-expect&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; What to expect&lt;/h1&gt;
&lt;p&gt;The code provided in the R Markdown file requires the &lt;code&gt;tidyverse&lt;/code&gt;, &lt;code&gt;JSONlite&lt;/code&gt;, and &lt;code&gt;lubridate&lt;/code&gt; packages as well as a JSON file containing your Trello data. It will generate the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tidy_cards.csv&lt;/code&gt; file ready to import to Airtable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attachments&lt;/code&gt; folder containing any content you’ve attached to your cards using a URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attachment_errors.csv&lt;/code&gt; file containing the card name, or task, as well as the URL/file path of any attachments that failed to download (i.e. links to files stored locally), so that you exactly which links you’ll need to locate manually.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;By the end of the tutorial&lt;/strong&gt; you’ll have imported a CSV file into Airtable &lt;em&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/em&gt; configured Airtable to match your Trello board. Specifically, you’ll be able to migrate &lt;strong&gt;labels&lt;/strong&gt;, &lt;strong&gt;lists&lt;/strong&gt;, &lt;strong&gt;attachments&lt;/strong&gt;, &lt;strong&gt;card names&lt;/strong&gt;, &lt;strong&gt;card descriptions&lt;/strong&gt;, &lt;strong&gt;card due dates&lt;/strong&gt;, &lt;strong&gt;date last modified&lt;/strong&gt;, and whether the cards were marked &lt;strong&gt;“complete” or archived.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;what-not-to-expect&#34; class=&#34;section level2&#34; number=&#34;1.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; What &lt;em&gt;not&lt;/em&gt; to expect&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rendered markdown from your card descriptions. Airtable &lt;em&gt;does&lt;/em&gt; support markdown in its “long text” field type, but it doesn’t automatically render from imported text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;choose-your-own-adventure&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Choose your own adventure&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Download the R Markdown file&lt;/strong&gt; linked above &lt;i class=&#34;fas fa-hand-point-up&#34;&gt;&lt;/i&gt; and run with it. Jump down to section &lt;a href=&#34;#formatting-in-airtable&#34;&gt;Formatting in Airtable&lt;/a&gt; for pointers on how to get your Airtable base configured like your Trello board.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep reading&lt;/strong&gt; for a code-through of the R Markdown file, using the example featured in the picture above, with tips and resources along the way.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;follow-along-with-me&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Follow along with me!&lt;/h1&gt;
&lt;p&gt;The Trello board used for this code-through is this &lt;a href=&#34;https://trello.com/templates/project-management/program-management-template-potjK48u&#34;&gt;Program Management Template&lt;/a&gt; created by Soniya Ahuja. To download the Trello board data, go to &lt;em&gt;Menu&lt;/em&gt; &amp;gt; &lt;em&gt;More&lt;/em&gt; &amp;gt; &lt;em&gt;Print and Export&lt;/em&gt; and then right-click on “Export as JSON” to save the JSON file in your working directory. &lt;strong&gt;Or&lt;/strong&gt; save a little time and download the &lt;code&gt;program-mgmt.json&lt;/code&gt; file linked above &lt;i class=&#34;fas fa-hand-point-up&#34;&gt;&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;You may also choose to read through &lt;a href=&#34;https://help.trello.com/article/924-making-sense-of-trellos-json-export&#34;&gt;Making Sense of Trello’s JSON Export&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least – we’ll be keeping things tidy, with the help of the &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyverse&lt;/strong&gt; collection of R packages&lt;/a&gt;, to ensure each variable is in its own column, observations are in rows, and values are in cells. You can read more about tidy data in &lt;a href=&#34;https://tidyr.tidyverse.org/articles/tidy-data.html&#34;&gt;Chapter 12 of R for Data Science&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;importing-json-file&#34; class=&#34;section level1&#34; number=&#34;4&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Importing JSON file&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# clearing environment
rm(list = ls())

# loading libraries
library(jsonlite)
library(lubridate)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trello &amp;lt;- stream_in(file(&amp;quot;program-mgmt.json&amp;quot;)) # produces a data frame&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(trello)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 1
## Columns: 35
## $ id                &amp;lt;chr&amp;gt; &amp;quot;5eb0d2732976430b950123eb&amp;quot;
## $ name              &amp;lt;chr&amp;gt; &amp;quot;Program Management Template&amp;quot;
## $ desc              &amp;lt;chr&amp;gt; &amp;quot;A simple template with valuable links to resources…
## $ descData          &amp;lt;lgl&amp;gt; NA
## $ closed            &amp;lt;lgl&amp;gt; FALSE
## $ idOrganization    &amp;lt;lgl&amp;gt; NA
## $ shortLink         &amp;lt;chr&amp;gt; &amp;quot;AENSPbmG&amp;quot;
## $ powerUps          &amp;lt;list&amp;gt; [[]]
## $ dateLastActivity  &amp;lt;chr&amp;gt; &amp;quot;2020-05-05T02:41:56.852Z&amp;quot;
## $ idTags            &amp;lt;list&amp;gt; [[]]
## $ datePluginDisable &amp;lt;lgl&amp;gt; NA
## $ creationMethod    &amp;lt;lgl&amp;gt; NA
## $ idBoardSource     &amp;lt;chr&amp;gt; &amp;quot;5e2440092eecc03dab3d216b&amp;quot;
## $ idEnterprise      &amp;lt;lgl&amp;gt; NA
## $ pinned            &amp;lt;lgl&amp;gt; FALSE
## $ starred           &amp;lt;lgl&amp;gt; FALSE
## $ url               &amp;lt;chr&amp;gt; &amp;quot;https://trello.com/b/AENSPbmG/program-management-t…
## $ shortUrl          &amp;lt;chr&amp;gt; &amp;quot;https://trello.com/b/AENSPbmG&amp;quot;
## $ ixUpdate          &amp;lt;chr&amp;gt; &amp;quot;4&amp;quot;
## $ limits            &amp;lt;df[,11]&amp;gt; &amp;lt;data.frame[1 x 11]&amp;gt;
## $ enterpriseOwned   &amp;lt;lgl&amp;gt; FALSE
## $ prefs             &amp;lt;df[,22]&amp;gt; &amp;lt;data.frame[1 x 22]&amp;gt;
## $ subscribed        &amp;lt;lgl&amp;gt; FALSE
## $ templateGallery   &amp;lt;lgl&amp;gt; NA
## $ labelNames        &amp;lt;df[,10]&amp;gt; &amp;lt;data.frame[1 x 10]&amp;gt;
## $ dateLastView      &amp;lt;chr&amp;gt; &amp;quot;2020-05-06T15:48:51.390Z&amp;quot;
## $ actions           &amp;lt;list&amp;gt; [&amp;lt;data.frame[2 x 7]&amp;gt;]
## $ cards             &amp;lt;list&amp;gt; [&amp;lt;data.frame[32 x 37]&amp;gt;]
## $ labels            &amp;lt;list&amp;gt; [&amp;lt;data.frame[7 x 4]&amp;gt;]
## $ lists             &amp;lt;list&amp;gt; [&amp;lt;data.frame[11 x 9]&amp;gt;]
## $ members           &amp;lt;list&amp;gt; [&amp;lt;data.frame[1 x 20]&amp;gt;]
## $ checklists        &amp;lt;list&amp;gt; [&amp;lt;data.frame[2 x 8]&amp;gt;]
## $ customFields      &amp;lt;list&amp;gt; [[]]
## $ memberships       &amp;lt;list&amp;gt; [&amp;lt;data.frame[1 x 5]&amp;gt;]
## $ pluginData        &amp;lt;list&amp;gt; [[]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;lot&lt;/em&gt; of information about the Trello board is contained in JSON data. We’ll be parsing information about the &lt;code&gt;cards&lt;/code&gt; as well as the &lt;code&gt;lists&lt;/code&gt; and then joining them together by a common identifier &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;idShort&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-information&#34; class=&#34;section level1&#34; number=&#34;5&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Parsing information&lt;/h1&gt;
&lt;p&gt;Parsing information from JSON data was not something I was familiar with and found myself coming back to Kan Nishida’s post &lt;a href=&#34;https://blog.exploratory.io/working-with-json-data-in-very-simple-way-ad7ebcc0bb89&#34;&gt;Working with JSON data in a very simple way&lt;/a&gt; time and time again throughout this process.&lt;/p&gt;
&lt;div id=&#34;cards&#34; class=&#34;section level2&#34; number=&#34;5.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1&lt;/span&gt; Cards&lt;/h2&gt;
&lt;p&gt;The first step is to extract information about the Trello &lt;code&gt;cards&lt;/code&gt; themselves. This information is contained within a list of data frames and requires &lt;strong&gt;flattening&lt;/strong&gt; which makes the nested hierarchical data structure into a flatter structure by assigning each of the nested variables its own column as much as possible. Then, the most important variables are selected as &lt;code&gt;cards_trim&lt;/code&gt; before moving on to extracting &lt;code&gt;label&lt;/code&gt; information.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# selecting cards information
cards &amp;lt;- trello$cards # list of 1

# flattening
cards_flat &amp;lt;- flatten(cards) #list of 37

# tibble time
cards_flat_tbl &amp;lt;- as_tibble(cards_flat) # 32 obs of 37 variables
glimpse(cards_flat_tbl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 32
## Columns: 37
## $ id                    &amp;lt;chr&amp;gt; &amp;quot;5eb0d2732976430b95012422&amp;quot;, &amp;quot;5eb0d2732976430b95…
## $ address               &amp;lt;lgl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ checkItemStates       &amp;lt;lgl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ closed                &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…
## $ coordinates           &amp;lt;lgl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ creationMethod        &amp;lt;lgl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ dateLastActivity      &amp;lt;chr&amp;gt; &amp;quot;2020-05-05T02:41:56.366Z&amp;quot;, &amp;quot;2020-05-05T02:41:5…
## $ desc                  &amp;lt;chr&amp;gt; &amp;quot;- Limit Objectives To a Quarter\n- Use OKRs to…
## $ descData              &amp;lt;lgl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ dueReminder           &amp;lt;int&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, -1, -1,…
## $ idBoard               &amp;lt;chr&amp;gt; &amp;quot;5eb0d2732976430b950123eb&amp;quot;, &amp;quot;5eb0d2732976430b95…
## $ idLabels              &amp;lt;list&amp;gt; [&amp;lt;&amp;gt;, &amp;quot;5eb0d2732976430b9501245a&amp;quot;, &amp;quot;5eb0d2732976…
## $ idList                &amp;lt;chr&amp;gt; &amp;quot;5eb0d2732976430b950123ec&amp;quot;, &amp;quot;5eb0d2732976430b95…
## $ idMembersVoted        &amp;lt;list&amp;gt; [[], [], [], [], [], [], [], [], [], [], [], […
## $ idShort               &amp;lt;int&amp;gt; 7, 17, 18, 19, 8, 21, 22, 32, 16, 20, 25, 26, 9…
## $ idAttachmentCover     &amp;lt;chr&amp;gt; &amp;quot;5eb0d2742976430b950124e1&amp;quot;, NA, NA, NA, &amp;quot;5eb0d2…
## $ locationName          &amp;lt;lgl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ manualCoverAttachment &amp;lt;lgl&amp;gt; TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, …
## $ name                  &amp;lt;chr&amp;gt; &amp;quot;Key Objectives that the program will focus on …
## $ pos                   &amp;lt;dbl&amp;gt; 65535.0, 131071.0, 196607.0, 262143.0, 65535.0,…
## $ shortLink             &amp;lt;chr&amp;gt; &amp;quot;qvqixygv&amp;quot;, &amp;quot;4rOLZNMw&amp;quot;, &amp;quot;KgVOC3qc&amp;quot;, &amp;quot;4Fly9akh&amp;quot;,…
## $ isTemplate            &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…
## $ badges                &amp;lt;df[,14]&amp;gt; &amp;lt;data.frame[26 x 14]&amp;gt;
## $ dueComplete           &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…
## $ due                   &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ email                 &amp;lt;chr&amp;gt; &amp;quot;spcanelon+2rt0kpr4pzcxfhsnf6o+2ua72xba0q9l7pk1…
## $ idChecklists          &amp;lt;list&amp;gt; [&amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;…
## $ idMembers             &amp;lt;list&amp;gt; [[], [], [], [], [], [], [], [], [], [], [], […
## $ labels                &amp;lt;list&amp;gt; [&amp;lt;data.frame[0 x 0]&amp;gt;, &amp;lt;data.frame[1 x 4]&amp;gt;, &amp;lt;da…
## $ limits                &amp;lt;df[,3]&amp;gt; &amp;lt;data.frame[26 x 3]&amp;gt;
## $ shortUrl              &amp;lt;chr&amp;gt; &amp;quot;https://trello.com/c/qvqixygv&amp;quot;, &amp;quot;https://trell…
## $ subscribed            &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…
## $ url                   &amp;lt;chr&amp;gt; &amp;quot;https://trello.com/c/qvqixygv/7-key-objectives…
## $ cover                 &amp;lt;df[,6]&amp;gt; &amp;lt;data.frame[26 x 6]&amp;gt;
## $ attachments           &amp;lt;list&amp;gt; [&amp;lt;data.frame[1 x 11]&amp;gt;, &amp;lt;data.frame[0 x 0]&amp;gt;, &amp;lt;d…
## $ pluginData            &amp;lt;list&amp;gt; [[], [], [], [], [], [], [], [], [], [], [], […
## $ customFieldItems      &amp;lt;list&amp;gt; [[], [], [], [], [], [], [], [], [], [], [], […&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# selecting wanted variables
cards_trim &amp;lt;- cards_flat_tbl %&amp;gt;%
  select(id, idShort, idList, dateLastActivity, name, desc, dueComplete, due,
         labels, attachments, shortUrl, closed) %&amp;gt;%
  arrange(desc(dateLastActivity))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level3&#34; number=&#34;5.1.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1.1&lt;/span&gt; Labels&lt;/h3&gt;
&lt;p&gt;Relevant information about the labels is selected and the &lt;code&gt;unnest&lt;/code&gt; function is used to flatten because &lt;code&gt;labels&lt;/code&gt; is a list of data frames. Again, I found &lt;a href=&#34;https://blog.exploratory.io/working-with-json-data-in-very-simple-way-ad7ebcc0bb89&#34;&gt;Kan’s post&lt;/a&gt; helpful here! Particularly for saving the label details as a character list, which is helpful later on. Once we get to Airtable it’ll be important that label information for each &lt;code&gt;card&lt;/code&gt; be structured as a simple list of words (i.e. label1, label2, label3).
We get close once the &lt;code&gt;labels&lt;/code&gt; are contained within a character list &lt;code&gt;labelList&lt;/code&gt;, but there are still “c”s and parentheses that need to be removed. String manipulation is something I’m still learning about so the code below is far from elegant!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# extracting labels details
labels_info &amp;lt;- cards_trim %&amp;gt;%
  select(id, idShort, labels) %&amp;gt;%
  unnest() %&amp;gt;% # no arguments because the nested items don&amp;#39;t have names
  rename(labelName = name) %&amp;gt;%
  select(id, idShort, labelName) %&amp;gt;%
  group_by(id, idShort) %&amp;gt;%
  summarize(labelList = list(labelName)) %&amp;gt;%
  mutate(labelList = as.character(labelList)) %&amp;gt;%
  mutate(labelList_tidy = str_remove_all(labelList, pattern = &amp;quot;\&amp;quot;&amp;quot;)) %&amp;gt;%
  mutate(labelList_tidy = str_remove_all(labelList_tidy, pattern =&amp;quot;c\\(&amp;quot;)) %&amp;gt;%
  mutate(labelList_tidy = str_remove_all(labelList_tidy, pattern =&amp;quot;\\)&amp;quot;)) %&amp;gt;%
  unique()

knitr::kable(labels_info %&amp;gt;% head(n = 3L))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;idShort&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;labelList&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;labelList_tidy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5eb0d2732976430b95012436&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Product&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5eb0d2732976430b95012438&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sales &amp;amp; Marketing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sales &amp;amp; Marketing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5eb0d2732976430b9501243a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Engineering&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Engineering&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# joining back with main cards data frame
ct_labels &amp;lt;- left_join(cards_trim %&amp;gt;% select(-labels), labels_info %&amp;gt;% select(-labelList))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;attachments&#34; class=&#34;section level3&#34; number=&#34;5.1.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1.2&lt;/span&gt; Attachments&lt;/h3&gt;
&lt;p&gt;The next step is to download all of the items attached to the cards onto a local folder. I found &lt;a href=&#34;https://stackoverflow.com/questions/32174306/download-url-links-using-r&#34;&gt;this StackOverflow post&lt;/a&gt; really helpful. When I tried this out on my own Trello board I also found that I couldn’t download the few attachments I had made from my local drive. &lt;a href=&#34;https://stackoverflow.com/questions/2158780/catching-an-error-and-then-branching-logic/2158803#2158803&#34;&gt;This StackOverflow post&lt;/a&gt; helped me figure out how to flag and catch these download errors so that I could create a list of the urls with “attachment errors” that I could follow up with manually.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# expanding the attachment lists into separate url records
att_urls &amp;lt;- ct_labels %&amp;gt;%
  select(idShort, attachments) %&amp;gt;%
  unnest() %&amp;gt;%
  select(idShort, url) %&amp;gt;%
  mutate(url = as.character(url),
         attachmentError = &amp;#39;FALSE&amp;#39;)
knitr::kable(att_urls %&amp;gt;% head(n = 3L))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;4%&#34; /&gt;
&lt;col width=&#34;85%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;idShort&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;url&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;attachmentError&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://trello-attachments.s3.amazonaws.com/5eb0d2732976430b950123eb/5eb0d2732976430b95012428/x/65f56db0b02c7d71fbb20c23c6923ecf/risk.png&#34; class=&#34;uri&#34;&gt;https://trello-attachments.s3.amazonaws.com/5eb0d2732976430b950123eb/5eb0d2732976430b95012428/x/65f56db0b02c7d71fbb20c23c6923ecf/risk.png&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://trello-attachments.s3.amazonaws.com/5eb0d2732976430b950123eb/5eb0d2732976430b9501242e/x/f400e4051bafe46d0a2918ce429c77b3/scrum.png&#34; class=&#34;uri&#34;&gt;https://trello-attachments.s3.amazonaws.com/5eb0d2732976430b950123eb/5eb0d2732976430b9501242e/x/f400e4051bafe46d0a2918ce429c77b3/scrum.png&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://trello-attachments.s3.amazonaws.com/5eb0d2732976430b950123eb/5eb0d2732976430b95012420/x/4c5034647d03e2bfd7c8f3d95989dd84/party.png&#34; class=&#34;uri&#34;&gt;https://trello-attachments.s3.amazonaws.com/5eb0d2732976430b950123eb/5eb0d2732976430b95012420/x/4c5034647d03e2bfd7c8f3d95989dd84/party.png&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# creating directory for attachments
dirAttachments &amp;lt;- &amp;quot;attachments/&amp;quot;
dir.create(dirAttachments)

# downloading urls and checking for errors using try()
for (i in 1:length(att_urls$url)){
  locAttachments &amp;lt;-
        paste(dirAttachments, &amp;quot;/&amp;quot;, att_urls$idShort[i], &amp;quot;_&amp;quot;, basename(att_urls$url[i]), sep = &amp;quot;&amp;quot;)
  step_to_try &amp;lt;- try(attachment_check &amp;lt;- download.file(att_urls$url[i], destfile = locAttachments))
  if(&amp;quot;try-error&amp;quot; %in% class(step_to_try)) {
    cat(&amp;quot;Error row: &amp;quot;, i, &amp;quot;\n&amp;quot;, &amp;quot;Error message: &amp;quot;, step_to_try[1], sep = &amp;quot;&amp;quot;)
    att_urls$attachmentError[i] = &amp;#39;TRUE&amp;#39;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following selects the attachment records with errors, renames somes variables, and exports the data frame as a CSV.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preparing data frame for export to CSV
attachment_errors &amp;lt;- att_urls %&amp;gt;%
  filter(attachmentError == TRUE) %&amp;gt;%
  rename(Task_Id = idShort, Attachment_URL = url, Attachment_Error = attachmentError)

# exporting to CSV
write.csv(attachment_errors, file = &amp;quot;attachment_errors.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Aside:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;If you have a lot of attachments &lt;em&gt;per card&lt;/em&gt;, you may want to create a directory folder for each card. This for loop will get you there – use it instead of the one above:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# creates individual directory folders for each card id
for (i in 1:length(att_urls$url)){
  dirAttachments &amp;lt;- paste(dirFiles, &amp;quot;attachments&amp;quot;, att_urls$idShort[i], sep = &amp;quot;/&amp;quot;)
  dir.create(dirAttachments) # creates directory for each unique card id
  locAttachments &amp;lt;- paste(dirAttachments, basename(url[i]), sep = &amp;quot;/&amp;quot;)
  download.file(url[i], destfile = locAttachments)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Records in the main &lt;code&gt;cards&lt;/code&gt; data frame are labeled “TRUE” within the &lt;code&gt;attachments&lt;/code&gt; column if they have attachments and “FALSE” if they don’t.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# converts the attachment column to a categorical variable in the main cards+labels data frame
ct_labels &amp;lt;- ct_labels %&amp;gt;%
  mutate(attachments = ifelse(idShort %in% att_urls$idShort, TRUE, FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;lists&#34; class=&#34;section level2&#34; number=&#34;5.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.2&lt;/span&gt; Lists&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;lists&lt;/code&gt; information is extracted similarly to the &lt;code&gt;cards&lt;/code&gt; information, but flattening is a little more straightforward because it involves only one data frame. With more data frames, the &lt;code&gt;unnest&lt;/code&gt; function is a better choice.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# selecting lists information
lists &amp;lt;- trello$lists # list of 1 data frame
glimpse(lists)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 1
##  $ :&amp;#39;data.frame&amp;#39;:    11 obs. of  9 variables:
##   ..$ id            : chr [1:11] &amp;quot;5eb0d2732976430b950123ec&amp;quot; &amp;quot;5eb0d2732976430b950123ed&amp;quot; &amp;quot;5eb0d2732976430b950123ee&amp;quot; &amp;quot;5eb0d2732976430b950123ef&amp;quot; ...
##   ..$ name          : chr [1:11] &amp;quot;Focus Objectives For The Quarter&amp;quot; &amp;quot;Key Performance Indicators For The Quarter&amp;quot; &amp;quot;Metrics and Reporting&amp;quot; &amp;quot;Milestones &amp;amp; Important Dates&amp;quot; ...
##   ..$ closed        : logi [1:11] FALSE FALSE FALSE FALSE FALSE FALSE ...
##   ..$ pos           : int [1:11] 65535 131071 147455 163839 180223 188415 196607 262143 327679 393215 ...
##   ..$ softLimit     : logi [1:11] NA NA NA NA NA NA ...
##   ..$ creationMethod: logi [1:11] NA NA NA NA NA NA ...
##   ..$ idBoard       : chr [1:11] &amp;quot;5eb0d2732976430b950123eb&amp;quot; &amp;quot;5eb0d2732976430b950123eb&amp;quot; &amp;quot;5eb0d2732976430b950123eb&amp;quot; &amp;quot;5eb0d2732976430b950123eb&amp;quot; ...
##   ..$ limits        :&amp;#39;data.frame&amp;#39;:   11 obs. of  1 variable:
##   .. ..$ cards:&amp;#39;data.frame&amp;#39;: 11 obs. of  2 variables:
##   ..$ subscribed    : logi [1:11] FALSE FALSE FALSE FALSE FALSE FALSE ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# flattening
lists_flat &amp;lt;- lists[[1]] # 17 obs of 9 variables

# selecting wanted variables
lists_trim &amp;lt;- lists_flat %&amp;gt;%
  select(id, name, closed) %&amp;gt;%
  rename(idList = id, nameList = name, closedList = closed)
knitr::kable(lists_trim %&amp;gt;% head(n = 3L))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;idList&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;nameList&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;closedList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5eb0d2732976430b950123ec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Focus Objectives For The Quarter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5eb0d2732976430b950123ed&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Key Performance Indicators For The Quarter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5eb0d2732976430b950123ee&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Metrics and Reporting&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# joining back with main cards+labels data frame
ct_labels_list &amp;lt;- left_join(ct_labels, lists_trim) %&amp;gt;%
  select(id:shortUrl, labelList_tidy:nameList, closed, closedList)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exporting-to-csv&#34; class=&#34;section level1&#34; number=&#34;6&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; Exporting to CSV&lt;/h1&gt;
&lt;div id=&#34;data-prepping&#34; class=&#34;section level2&#34; number=&#34;6.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.1&lt;/span&gt; Data prepping&lt;/h2&gt;
&lt;p&gt;Columns in the new &lt;code&gt;ct_labels_list&lt;/code&gt; data frame are given new names, and the &lt;code&gt;lubridate&lt;/code&gt; package is used next to convert the date fields. &lt;a href=&#34;http://biostat.mc.vanderbilt.edu/wiki/pub/Main/ColeBeck/datestimes.pdf&#34;&gt;This resource&lt;/a&gt; was helpful in understanding date conversions and formatting.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# changing variable names
tidy_cards &amp;lt;- ct_labels_list %&amp;gt;%
  select(-id, -idList, -closedList) %&amp;gt;%
  rename(Task = name, Task_ID = idShort, Notes = desc, Done = dueComplete, Date_Due = due,
         Labels = labelList_tidy, Trello_List = nameList, Trello_Last_Modified = dateLastActivity,
         Trello_Url = shortUrl, Trello_Attachments = attachments, Archived = closed) %&amp;gt;%
  select(Task, Task_ID, Notes, Done, Date_Due, Labels, Trello_List, Trello_Last_Modified,
         Trello_Url, Trello_Attachments, Archived) %&amp;gt;%
  mutate(Trello_Last_Modified = as_datetime(Trello_Last_Modified, tz = &amp;quot;&amp;quot;),
         Date_Due = as_datetime(Date_Due, tz = &amp;quot;&amp;quot;),
         Done = ifelse(is.na(Date_Due) == TRUE, &amp;#39;NA&amp;#39;, Done)) # ensures only undone tasks assigned a due date get marked as &amp;quot;FALSE&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last step before exporting the final data frame &lt;code&gt;tidy_cards&lt;/code&gt; is to check the unique number of tasks to make sure it matches the number of records in the data frame (i.e. one task per observation).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# determining the number of unique tasks
length(unique(tidy_cards$Task_ID))
## [1] 32

# final look at tidy_cards
glimpse(tidy_cards)
## Rows: 32
## Columns: 11
## $ Task                 &amp;lt;chr&amp;gt; &amp;quot;Risks, dependencies, status and mitigation plan…
## $ Task_ID              &amp;lt;int&amp;gt; 10, 13, 6, 14, 11, 8, 16, 15, 12, 9, 7, 2, 3, 4,…
## $ Notes                &amp;lt;chr&amp;gt; &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;### OKR Examples\n\n- Plent…
## $ Done                 &amp;lt;chr&amp;gt; &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;NA&amp;quot;, …
## $ Date_Due             &amp;lt;dttm&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
## $ Labels               &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ Trello_List          &amp;lt;chr&amp;gt; &amp;quot;Risks &amp;amp; Dependencies&amp;quot;, &amp;quot;Release Management&amp;quot;, &amp;quot;E…
## $ Trello_Last_Modified &amp;lt;dttm&amp;gt; 2020-05-04 22:41:56, 2020-05-04 22:41:56, 2020-…
## $ Trello_Url           &amp;lt;chr&amp;gt; &amp;quot;https://trello.com/c/gu8n5Tmt&amp;quot;, &amp;quot;https://trello…
## $ Trello_Attachments   &amp;lt;lgl&amp;gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …
## $ Archived             &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-exporting&#34; class=&#34;section level2&#34; number=&#34;6.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.2&lt;/span&gt; Data exporting&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(tidy_cards, file = &amp;quot;tidy_cards.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;formatting-in-airtable&#34; class=&#34;section level1&#34; number=&#34;7&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;7&lt;/span&gt; Formatting in Airtable&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Import CSV into Airtable as a new base.&lt;/strong&gt; &lt;em&gt;Add a base&lt;/em&gt; &amp;gt; &lt;em&gt;Import a spreadsheet&lt;/em&gt; &amp;gt; &lt;em&gt;CSV file&lt;/em&gt;. Upload the &lt;code&gt;cards_tidy.csv&lt;/code&gt; file. Pick a name, icon, and color for your brand new base!
More detailed instructions can be found in &lt;a href=&#34;https://support.airtable.com/hc/en-us/articles/202579399-Import-an-Existing-Spreadsheet-or-CSV-Into-a-New-App#cleanup&#34;&gt;this Airtable article&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;task&#34; class=&#34;section level2&#34; number=&#34;7.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.1&lt;/span&gt; Task&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Because we know each observation in our table is unique, we can copy and paste &lt;code&gt;Task&lt;/code&gt; into the first column and hide/delete the original column. &lt;code&gt;Task&lt;/code&gt; is now the primary field.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;task_id&#34; class=&#34;section level2&#34; number=&#34;7.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.2&lt;/span&gt; Task_ID&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Convert &lt;code&gt;Task_ID&lt;/code&gt; field type to “number”.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level2&#34; number=&#34;7.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.3&lt;/span&gt; Notes&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Convert &lt;code&gt;Notes&lt;/code&gt; field type to “long text” and enable &lt;em&gt;rich text formatting&lt;/em&gt;. This gives us the option of using Markdown in the future, but sadly doesn’t automatically recognize fully formatted Markdown in the imported text.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;labels-1&#34; class=&#34;section level2&#34; number=&#34;7.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.4&lt;/span&gt; Labels&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Change &lt;code&gt;Labels&lt;/code&gt; field type to “multiple select” so that it turns each item in each list into a label.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Optional&lt;/strong&gt;&lt;/em&gt;: Create a new &lt;code&gt;Projects&lt;/code&gt; column next to &lt;code&gt;Labels&lt;/code&gt; and use the labels to guide you in creating &lt;code&gt;Project&lt;/code&gt; labels/categories: Group the records by &lt;code&gt;Labels&lt;/code&gt; field and add to &lt;code&gt;Projects&lt;/code&gt; field as appropriate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    I recommend creating an &lt;code&gt;NA&lt;/code&gt; project from the &lt;code&gt;NA&lt;/code&gt; labels so that these tasks aren’t marked as “uncategorized” in the &lt;code&gt;Projects&lt;/code&gt; column. Having records with an “empty” assignment gets in the way whenever you want to group by that category. To that end, it’s helpful to group by &lt;code&gt;Project&lt;/code&gt; and make sure any “empty” records get assigned to the “NA” &lt;code&gt;Project&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Delete from &lt;code&gt;Labels&lt;/code&gt; any labels that were converted to &lt;code&gt;Projects&lt;/code&gt; and ungroup the records.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;trello_lists&#34; class=&#34;section level2&#34; number=&#34;7.5&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.5&lt;/span&gt; Trello_Lists&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Convert &lt;code&gt;Trello_Lists&lt;/code&gt; column field type into “single select”. This gives us the option of using the Kanban style we were used to in Trello.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Every record should already be associated with a Trello_List.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;If you want to replicate the Trello kanban layout, change the order of the single select options in &lt;code&gt;Trello_Lists&lt;/code&gt; to match the order from left-to-right of your Trello board&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;trello_url&#34; class=&#34;section level2&#34; number=&#34;7.6&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.6&lt;/span&gt; Trello_URL&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Convert the &lt;code&gt;Trello_URL&lt;/code&gt; field type to “URL” and then hide it if you don’t think you’ll reference it often.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;trello_attachments&#34; class=&#34;section level2&#34; number=&#34;7.7&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.7&lt;/span&gt; Trello_Attachments&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Convert &lt;code&gt;Trello_Attachments&lt;/code&gt; field type to “single select”&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;Attachments&lt;/code&gt; column with field type “attachment”. This is where you’ll upload your downloaded attachments.&lt;/li&gt;
&lt;li&gt;Filter your records by &lt;code&gt;Trello_Attachments&lt;/code&gt; so only show “TRUE” results&lt;/li&gt;
&lt;li&gt;Sort records by &lt;code&gt;Task_ID&lt;/code&gt; and simplify your view by temporarily hiding all columns except for &lt;code&gt;Task_Name&lt;/code&gt; (primary field), &lt;code&gt;Task_ID&lt;/code&gt;, &lt;code&gt;Trello_Attachments&lt;/code&gt;, and the new &lt;code&gt;Attachments&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;Open your local &lt;code&gt;attachments&lt;/code&gt; folder and drag and drop the files to their corresponding &lt;code&gt;Attachments&lt;/code&gt; field according to their &lt;code&gt;Task_ID&lt;/code&gt; in the filename.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Increase the height of the records for this step. It’ll make it easier to make sure you’re dragging and dropping to the correct record
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;If you encountered errors downloading some of your attachment URLs, now is the time to check your local &lt;code&gt;attachment_errors.csv&lt;/code&gt; file for the URLs with errors during the download process. These are attachments you’ll have to find elsewhere and upload to the &lt;code&gt;Attachments&lt;/code&gt; field as needed.&lt;/li&gt;
&lt;li&gt;Remove the filter to your view and unhide any columns you wish to remain visible.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;done-archived&#34; class=&#34;section level2&#34; number=&#34;7.8&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.8&lt;/span&gt; Done &amp;amp; Archived&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Convert the &lt;code&gt;Done&lt;/code&gt; and &lt;code&gt;Archived&lt;/code&gt; field types to “Checkbox” and it will automatically assign a “check” to all records marked “TRUE” and leave the ones marked “FALSE” or “NA” unchecked. So easy!&lt;/li&gt;
&lt;li&gt;There is no direct option to “archive” tasks that have been completed like you can do in Trello, &lt;em&gt;but&lt;/em&gt; you can apply a filter to your table view to hide the tasks that are complete. To do this, set the filter so that the &lt;code&gt;Done&lt;/code&gt; and &lt;code&gt;Archived&lt;/code&gt; fields are unchecked.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This must be repeated for each saved View of your records.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;moving-forward&#34; class=&#34;section level1&#34; number=&#34;8&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;8&lt;/span&gt; Moving forward&lt;/h1&gt;
&lt;div id=&#34;dates&#34; class=&#34;section level2&#34; number=&#34;8.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.1&lt;/span&gt; Dates&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Modify &lt;code&gt;Date_Due&lt;/code&gt; and &lt;code&gt;Trello_Last_Modified&lt;/code&gt; field types to “Date” with time.&lt;/li&gt;
&lt;li&gt;You can sort the records by &lt;code&gt;Trello_Last_Modified&lt;/code&gt; if that’s helpful, but otherwise you can hide the column and keep it for historical reference.&lt;/li&gt;
&lt;li&gt;Create a new column &lt;code&gt;Last_Modified&lt;/code&gt; with field type “Last modified time” and select all columns you want to track changes to on a date/time basis moving forward.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;record-views&#34; class=&#34;section level2&#34; number=&#34;8.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.2&lt;/span&gt; Record Views&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Select &lt;strong&gt;Kanban&lt;/strong&gt; from the Views options and group by &lt;code&gt;Trello_List&lt;/code&gt; to see your tasks similar to how you saw them in Trello, complete with attachment covers! A &lt;em&gt;bonus&lt;/em&gt; is that if you have multiple images attached to a card, you can view them without expanding the card by just hovering over the attachment cover!&lt;/li&gt;
&lt;li&gt;Move, collapse, and delete stacks as you see fit. Customize cards with as little or as much information as you want.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;tasks-vs-subtasks&#34; class=&#34;section level2&#34; number=&#34;8.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.3&lt;/span&gt; Tasks vs Subtasks&lt;/h2&gt;
&lt;p&gt;There are probably many ways to parallel the checklist option Trello gives you within a card.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The most straightforward is to use the basic checklist formatting within the &lt;code&gt;Description&lt;/code&gt; field to create lists&lt;/li&gt;
&lt;li&gt;Another is to think of your primary field &lt;code&gt;Tasks&lt;/code&gt; instead as &lt;strong&gt;‘subtasks’&lt;/strong&gt; and create a new column to serve as the umbrella &lt;strong&gt;‘task’&lt;/strong&gt;. This new &lt;strong&gt;‘task’&lt;/strong&gt; column would be field type “single selection”, then you could group your records by &lt;strong&gt;‘task’&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
